---
- hosts: all
  vars:
    CRIO_VERSION: "1.24"
    OS: "Debian_11"
  remote_user: debian
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

# Installing docker and its dependencies
  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/debian/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/debian buster stable
      state: present

  - name: Add CRIO repos
    shell: |
      echo "deb [trusted=yes] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ OS }}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
      echo "deb [trusted=yes] http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ CRIO_VERSION }}/{{ OS }}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:{{ CRIO_VERSION }}.list
      curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ CRIO_VERSION }}/{{ OS }}/Release.key | apt-key add -
      curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ OS }}/Release.key | apt-key add -

  - name: Update cache again
    apt:
      update_cache: yes
    register: task_result
    until: task_result is success
    retries: 20
    delay: 2

  - name: Prerequiste for using cri-o with Kubernetes
    shell: |
      modprobe overlay
      modprobe br_netfilter
      cat > /etc/sysctl.d/99-kubernetes-cri.conf <<EOF
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF
      sysctl --system

  - name: Install CRIO and its dependecies
    apt:
      name: "{{ packages }}"
      state: present
    register: task_result
    until: task_result is success
    retries: 20
    delay: 2
    vars:
      packages:
        - cri-o
        - cri-tools
        - cri-o-runc
    notify:
      - crio status

  - name: Restart CRIO
    systemd:
      name: crio
      state: restarted
      enabled: yes
      daemon_reload: yes

# Disabling swap for kubelet to work
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

# Installing kubelet, kubeadm and kubectl
  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet
        - kubeadm
        - kubectl

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

# Initialize the cluster with kubeadm
  - name: Initialize the Kubernetes cluster using kubeadm
    command: "{{ item }}"
    with_items:
     - systemctl stop kubelet
     - kubeadm init --apiserver-cert-extra-sans={{ public_ip }} --control-plane-endpoint={{ public_ip }} --pod-network-cidr=10.244.0.0/16

# Setup kubeconfig file for admin
  - name: Setup kubeconfig for admin user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/debian/.kube
     - cp -i /etc/kubernetes/admin.conf /home/debian/.kube/config
     - chown debian:debian /home/debian/.kube/config

# Setup networking provider and network policy engine
  - name: Install flannel pod network
    become: false
    command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

# Generate join-command to add new nodes -- will be skipped for now
  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

# Setup handler for checking Docker daemon
  handlers:
    - name: crio status
      service: name=crio state=started
